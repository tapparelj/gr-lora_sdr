id: lora_sdr_whitening
label: Whitening
category: '[LoRa_TX]'
parameters:
-   id: source_type
    label: Source type
    dtype: enum
    default: message_strobe
    options: ['message_strobe', 'file_source']
    option_labels: ['Message strobe', 'File source']
-   id: is_hex
    label: is_hex
    dtype: bool
    default: false
    hide: ${ ( 'none' if str(source_type) == "file_source" else 'all') }

inputs:
-   domain: stream
    dtype: byte
    optional: ${ ( False if str(source_type) == "file_source" else True) }
    hide: ${ ( False if str(source_type) == "file_source" else True) }
-   domain: message
    id: msg
    optional: ${ ( False if str(source_type) == "message_strobe" else True) }
    hide: ${ ( False if str(source_type) == "message_strobe" else True) }
outputs:
-   domain: stream
    dtype: byte

templates:
    imports: import gnuradio.lora_sdr as lora_sdr
    make: lora_sdr.whitening(${is_hex})

documentation: |-
    Whiten the payload data with a pseudo random sequence
        Parameters:
            Source type: choose the input mode: message or file
            is_hex: the input file already contains the bits to transmitt as hexadecimal digits, else it contains ascii characters.
        Input:
            msg: the payload as a PMT message string
                or
            in: a file source with comma separated payloads.
        Output:
            out: Stream of whitened payload nibbles

file_format: 1
