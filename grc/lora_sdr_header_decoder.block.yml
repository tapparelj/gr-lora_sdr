# auto-generated by grc.converter

id: lora_sdr_header_decoder
label: Header decoder
category: '[LoRa_RX]'

parameters:
-   id: impl_head
    label: Impl_head
    dtype: bool
-   id: print_header
    label: print_header 
    dtype: enum
    options: ['True','False']
    option_labels: [ 'Yes','No']
-   id: cr
    label: CR
    dtype: int
    default: '3'
    hide: ${ 'none' if impl_head else 'all' }
-   id: pay_len
    label: Pay_len
    dtype: int
    default: '255'
    hide: ${ 'none' if impl_head else 'all' }
-   id: has_crc
    label: Has_crc
    dtype: bool
    default: 'False'
    hide: ${ 'none' if impl_head else 'all' }


inputs:
-   domain: stream
    dtype: byte

outputs:
-   domain: stream
    dtype: byte
-   domain: message
    id: frame_info

templates:
    imports: import gnuradio.lora_sdr as lora_sdr
    make: lora_sdr.header_decoder(${impl_head}, ${cr}, ${pay_len}, ${has_crc}, ${print_header})

documentation: |-
    Recover information present in the header of a frame and send them to the frame synchronization block, which forwards them to each other blocks.
    In implicit header mode, the values given as parameters will be transmitted to the other blocks.     
    Parameters:
        impl_head: indicate the usage of implicit header mode (explicit otherwise)
        CR: coding rate        
        pay_len: payload length in bytes       
        has_crc: indicate the presence of a payload CRC
    Input:        
        in: stream of nibbles containing the header, payload (and CRC if used)        
    Output:        
        out: stream of nibbles containing payload (and CRC)   
        frame_info: info of the frame contained in the header such as coding rate, CRC presence, and payload length

file_format: 1
