# auto-generated by grc.converter

id: lora_sdr_crc_verif
label: CRC verif
category: '[LoRa_RX]'

parameters:
-   id: print_rx_msg
    label: print_rx_msg
    dtype: enum
    options: [0, 1, 2]
    option_labels: ['None', 'ASCII', 'Hex']
    default: 1
-   id: output_crc_check
    label: output_crc_check
    dtype: enum
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    default: 'False'

inputs:
-   domain: stream
    dtype: byte
outputs:
-   domain: stream
    label: payload_char
    dtype: byte
    optional: ${True if str(output_crc_check)=='False' else False}
-   domain: stream
    dtype: byte
    label: crc_check
    optional: ${True if str(output_crc_check)=='False' else False}
    hide: ${False if str(output_crc_check)=='True' else True}
-   domain: message
    id: msg
    optional: true
templates:
    imports: import gnuradio.lora_sdr as lora_sdr
    make: lora_sdr.crc_verif( ${print_rx_msg}, ${output_crc_check})

documentation: |-
    Calculate the CRC of the received data and compare it with the received CRC.
      Parameters:
        rx_log: filename where to store the received messages and their timestamp, put "" for no log. "Walltime,payload\n"
        print_rx_msg: Print the received message in the terminal with the specified format. 0: None, 1: ASCII, 2: Hex
        output_crc_check: Ouput a stream of bytes containing either 0 or 1 based on the CRC check. If enabled, both stream output must be connected.
      Input:
        in: stream of payload bytes
      Output:
        (optional) msg: Received payload
        (optional) payload_char: Received payload as a stream of char, with tagged with payload length and CRC verification result.
        (optional) crc_check: stream indicating the result of the CRC verification. Enabled by the corresponding parameter.

file_format: 1
